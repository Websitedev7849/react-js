{"version":3,"sources":["Navbar.js","AddTask.js","Task.js","AddTaskWindow.js","ThemeToggle.js","App.js","index.js"],"names":["Navbar","fill","theme","useFill","setSearchWord","useEffect","className","xmlns","viewBox","width","height","stroke","strokeMiterlimit","strokeWidth","d","strokeLinecap","type","onChange","e","target","value","placeholder","AddTask","to","Task","tasks","DeleteTask","searchWords","filteredTask","filter","task","undefined","taskBody","includes","taskCreatedDate","filterTaskFunc","map","index","style","background","bgColor","onClick","id","src","alt","AddTaskWindow","useTasks","useState","date","setDate","text","setText","individualTask","history","useHistory","bgColors","action","onSubmit","preventDefault","Date","getTime","Math","floor","random","length","push","htmlFor","name","cols","rows","ThemeToggle","useTheme","toggled","useToggled","App","exact","path","newTasks","ReactDOM","render","document","getElementById"],"mappings":"uMA+BeA,EA7BA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,cAgBnC,OAJAC,qBAAU,WARNF,GAAS,WACL,MAAc,gBAAVD,EACO,UAEJ,gBASd,sBAAKI,UAAU,SAAf,UACG,sBAAKA,UAAU,aAAf,UAEI,sBAAKL,KAAMA,EAAMM,MAAM,6BAA8BC,QAAQ,YAAYC,MAAM,OAAOC,OAAO,OAA7F,UAAoG,sBAAMT,KAAK,OAAOU,OAAQV,EAAMW,iBAAiB,KAAKC,YAAY,IAAIC,EAAE,0CAAyC,sBAAMb,KAAK,OAAOU,OAAQV,EAAMc,cAAc,QAAQH,iBAAiB,KAAKC,YAAY,IAAIC,EAAE,4BAEnT,uBAAOR,UAAU,SAASU,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAId,EAAcc,EAAEC,OAAOC,QAAQC,YAAY,+BAEpG,oBAAIf,UAAU,QAAd,uBClBOgB,EAPC,WAEZ,OACI,cAAC,IAAD,CAAMhB,UAAU,WAAWiB,GAAG,iBAA9B,gBCqBOC,EAzBF,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,YAQ3BC,EAAeH,EAAMI,QAAO,SAAAC,GAAI,OANb,SAACA,GACpB,MAAmB,KAAhBH,QAAsCI,IAAhBJ,GAElBG,EAAKE,SAASC,SAASN,IAAgBG,EAAKI,gBAAgBD,SAASN,GAGxCQ,CAAeL,MAEvD,OACI,qBAAKxB,UAAU,iBAAf,SACKsB,EAAaQ,KAAI,SAACN,EAAMO,GAAP,OACd,sBAAK/B,UAAU,YAAwBgC,MAAS,CAACC,WAAYT,EAAKU,SAAlE,UACI,mBAAGlC,UAAU,YAAb,SAA2BwB,EAAKE,WAChC,mBAAG1B,UAAU,YAAb,SAA2BwB,EAAKI,kBAChC,wBAAQ5B,UAAU,aAAaU,KAAK,SAASyB,QAAW,kBAAMf,EAAWI,EAAKY,KAA9E,SACI,qBAAKC,IAAI,mBAAmBC,IAAI,oBAJRP,SCoCjCQ,EA/CO,SAAC,GAAuB,IAAtBpB,EAAqB,EAArBA,MAAOqB,EAAc,EAAdA,SAE3B,EAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAsBF,mBAAS,IAA/B,mBAAKG,EAAL,KAAWC,EAAX,KACIC,EAAiB,GAGfC,EAAUC,cAEZC,EAAW,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAelF,OACI,0BAASjD,UAAU,kBAAnB,UACI,oBAAIA,UAAU,cAAd,wBACA,uBAAMkD,OAAO,IAAIlD,UAAU,gBAAgBmD,SAhB9B,SAAAvC,GACjBA,EAAEwC,iBACFN,EAAeV,IAAK,IAAIiB,MAAOC,UAC/BR,EAAepB,SAAWkB,EAC1BE,EAAelB,gBAAkBc,EACjCI,EAAeZ,QAAUe,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASS,SACtEvC,EAAMwC,KAAKb,GACXN,EAASrB,GAGT4B,EAAQY,KAAK,MAMT,UACI,sBAAK3D,UAAU,sBAAf,UACI,uBAAO4D,QAAQ,YAAf,kBADJ,IAC4C,uBACxC,uBAAOlD,KAAK,OAAOmD,KAAK,YAAYlD,SAAU,SAACC,GAAQ+B,EAAQ/B,EAAEC,OAAOC,aAE5E,sBAAKd,UAAU,YAAf,UACI,uBAAO4D,QAAQ,WAAf,0BADJ,IACmD,uBAC/C,0BAAUC,KAAK,WACfC,KAAK,KACLC,KAAK,KACLhD,YAAY,yBACZJ,SAAU,SAACC,GAAQiC,EAAQjC,EAAEC,OAAOC,aAExC,cAAC,IAAD,CAAMd,UAAU,kBAAkBiB,GAAG,IAArC,oBACA,wBAAQjB,UAAU,kBAAkBU,KAAK,SAAzC,6BCTDsD,EAhCK,SAAC,GAAuB,IAAtBpE,EAAqB,EAArBA,MAAOqE,EAAc,EAAdA,SAEzB,EAA8BxB,mBAAS,IAAvC,mBAAOyB,EAAP,KAAgBC,EAAhB,KAkBA,OACI,sBAAKnE,UAAU,yBAAf,UACI,uBAAO4D,QAAQ,mBAAmB5D,UAAU,eAA5C,SACI,qBAAKA,UAAU,mBAAf,SACI,qBAAKA,UAAS,iBAAYkE,SAGlC,uBAAOxD,KAAK,WAAW0B,GAAG,mBAAmBD,QAvBjC,WAGhBgC,GAAW,WACP,MAAgB,YAAZD,EACO,GACJ,aAGXD,GAAS,WACL,MAAc,gBAAVrE,EACO,aACJ,wBCwCJwE,MAlDf,WAIE,MAAwB3B,mBAAS,IAAjC,mBAAKtB,EAAL,KAAYqB,EAAZ,KAQA,EAAmCC,mBAAS,IAA5C,mBAAKpB,EAAL,KAAkBvB,EAAlB,KAEA,EAAwB2C,mBAAS,eAAjC,mBAAK7C,EAAL,KAAYqE,EAAZ,KAGC,EAAsBxB,mBAAS,WAA/B,mBAAK9C,EAAL,KAAWE,EAAX,KAGD,OACE,cAAC,IAAD,UACE,sBAAKG,UAAS,cAASJ,GAAvB,UAEA,cAAC,EAAD,CAAaA,MAAOA,EAAOqE,SAAUA,IAEnC,0BAASjE,UAAU,OAAnB,UACE,cAAC,EAAD,CAAQL,KAAMA,EAAMC,MAAOA,EAAOC,QAASA,EAASC,cAAiBA,IAEnE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMnD,MAAOA,EAAOC,WA1Bf,SAACgB,GAClB,IAAMmC,EAAWpD,EAAMI,QAAO,SAACC,EAAMO,GAAP,OAAiBP,EAAKY,KAAOA,KAC3DI,EAAS+B,IAwBiDlD,YAAaA,MAG7D,cAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,iBAAlB,SACE,cAAC,EAAD,CAAenD,MAAOA,EAAOqB,SAAUA,SAM3C,cAAC,EAAD,aC5CZgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2466ba50.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst Navbar = ({fill, theme, useFill, setSearchWord}) => {\r\n\r\n    // this callback is to work around react hooks rules\r\n    const Callback = () => {\r\n        useFill( () => {\r\n            if (theme === \"light-theme\") {\r\n                return \"#000000\";\r\n            }\r\n            return \"#ffffff\"\r\n        });\r\n    }\r\n    \r\n    useEffect(() => {\r\n        Callback();\r\n    })\r\n\r\n    return (\r\n     <nav className=\"navbar\">\r\n        <div className=\"search-bar\">\r\n            \r\n            <svg fill={fill} xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 30 30\" width=\"30px\" height=\"30px\"><path fill=\"none\" stroke={fill} strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M13 4A9 9 0 1 0 13 22A9 9 0 1 0 13 4Z\"/><path fill=\"none\" stroke={fill} strokeLinecap=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M26 26L19.437 19.437\"/></svg>\r\n\r\n            <input className=\"search\" type=\"text\" onChange={e => setSearchWord(e.target.value)} placeholder=\"Search by Text, Date...\" />\r\n        </div>\r\n        <h1 className=\"Notes\">Notes</h1>\r\n     </nav>\r\n    );\r\n}\r\n \r\nexport default Navbar;","import { Link } from \"react-router-dom\";\r\nconst AddTask = () => {\r\n\r\n    return (\r\n        <Link className=\"add-task\" to=\"/addTaskWindow\">+</Link>\r\n    );\r\n}\r\n \r\nexport default AddTask;","const Task = ({ tasks, DeleteTask, searchWords}) => {\r\n\r\n    const filterTaskFunc = (task) => {\r\n        if(searchWords === \"\" || searchWords === undefined)\r\n          return true;\r\n        return task.taskBody.includes(searchWords) || task.taskCreatedDate.includes(searchWords);\r\n    };\r\n\r\n    let filteredTask = tasks.filter(task => filterTaskFunc(task));\r\n\r\n    return (\r\n        <div className=\"task-container\">\r\n            {filteredTask.map((task, index) => (\r\n                <div className=\"task-card\" key={index} style = {{background: task.bgColor}}>\r\n                    <p className=\"task-body\">{ task.taskBody }</p>\r\n                    <p className=\"task-date\">{ task.taskCreatedDate }</p>\r\n                    <button className=\"delete-btn\" type=\"button\" onClick = {() => DeleteTask(task.id)}>\r\n                        <img src=\"./images/bin.svg\" alt=\"edit button\"/>\r\n                    </button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task;","import { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nconst AddTaskWindow = ({tasks, useTasks}) => {\r\n\r\n    let [date, setDate] = useState('');\r\n    let [text, setText] = useState(''); \r\n    let individualTask = {};\r\n\r\n    // hook to redirect to home page without reloading the app\r\n    const history = useHistory();\r\n\r\n    let bgColors = [\"#eb826f\", \"#bff195\", \"#9759e9\", \"#e95984\", \"#eb8876\", \"#7691eb\", \"#7876eb\"];\r\n\r\n    const HandleSubmit = e => {\r\n        e.preventDefault();\r\n        individualTask.id = new Date().getTime();\r\n        individualTask.taskBody = text;\r\n        individualTask.taskCreatedDate = date;\r\n        individualTask.bgColor = bgColors[Math.floor(Math.random() * bgColors.length)];\r\n        tasks.push(individualTask);\r\n        useTasks(tasks);\r\n    \r\n        //redirecting to homepage \"/\"\r\n        history.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <section className=\"add-task-window\">\r\n            <h1 className=\"form-header\">ADD A TASK</h1>\r\n            <form action=\"#\" className=\"form-add-task\" onSubmit = {HandleSubmit}>\r\n                <div className=\"task-date-container\">\r\n                    <label htmlFor=\"task-date\">Date</label> <br />\r\n                    <input type=\"date\" name=\"task-date\" onChange={(e) => { setDate(e.target.value) }}/>\r\n                </div>\r\n                <div className=\"text-area\">\r\n                    <label htmlFor=\"textarea\">Your Message</label> <br />\r\n                    <textarea name=\"textarea\"\r\n                    cols=\"65\" \r\n                    rows=\"10\"\r\n                    placeholder=\"Enter you Message here\"\r\n                    onChange={(e) => { setText(e.target.value) }}></textarea>\r\n                </div>\r\n                <Link className=\"form-cancel-btn\" to=\"/\">Cancel</Link>\r\n                <button className=\"form-submit-btn\" type=\"submit\">Add Task</button>\r\n            </form>\r\n        </section>\r\n    );\r\n}\r\n \r\nexport default AddTaskWindow;","import { useState } from \"react\";\r\n\r\nconst ThemeToggle = ({theme, useTheme}) => {\r\n\r\n    const [toggled, useToggled] = useState(\"\");\r\n\r\n    const HandleClick = () => {\r\n\r\n        // callback returns value based on theme variable.\r\n        useToggled(() => {\r\n            if (toggled === \"toggled\") \r\n                return \"\"\r\n            return \"toggled\"\r\n        });\r\n\r\n        useTheme(() => {\r\n            if (theme === \"light-theme\")\r\n                return \"dark-theme\";\r\n            return \"light-theme\";\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"theme-toggle-container\">\r\n            <label htmlFor=\"toggle-theme-btn\" className=\"label-toggle\">\r\n                <div className=\"circle-container\">\r\n                    <div className={`circle ${toggled}`}></div>\r\n                </div>\r\n            </label>\r\n            <input type=\"checkbox\" id=\"toggle-theme-btn\" onClick={HandleClick} />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ThemeToggle;\r\n","import { useState } from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport  Navbar  from \"./Navbar\";\r\nimport AddTask from \"./AddTask\";\r\nimport Task from \"./Task\";\r\nimport AddTaskWindow from './AddTaskWindow';\r\nimport ThemeToggle from \"./ThemeToggle\";\r\n\r\nfunction App() {\r\n  \r\n  // TODO create custom Toggle button in ThemeToggle.js\r\n  \r\n  let [tasks, useTasks] = useState([]);\r\n\r\n  const DeleteTask = (id) => {\r\n    const newTasks = tasks.filter((task, index) => task.id !== id);\r\n    useTasks(newTasks);\r\n  };\r\n\r\n  // Search words from navigation bar\r\n  let [searchWords, setSearchWord] = useState(\"\");\r\n\r\n  let [theme, useTheme] = useState(\"light-theme\");\r\n  \r\n   // change the fill(style) of search.svg in Navbar component\r\n   let [fill, useFill] = useState(\"#000000\");\r\n \r\n  \r\n  return (\r\n    <Router>\r\n      <div className={`App ${theme}`}>\r\n\r\n      <ThemeToggle theme={theme} useTheme={useTheme}/>\r\n\r\n        <section className=\"main\">\r\n          <Navbar fill={fill} theme={theme} useFill={useFill} setSearchWord = {setSearchWord} />\r\n\r\n            <Switch>\r\n              \r\n              <Route exact path=\"/\">\r\n                <Task tasks={tasks} DeleteTask={ DeleteTask } searchWords={searchWords}/>\r\n              </Route>\r\n\r\n              <Route exact path=\"/addTaskWindow\">\r\n                <AddTaskWindow tasks={tasks} useTasks={useTasks} />\r\n              </Route>\r\n\r\n            </Switch>\r\n\r\n            {/* Add task button */}\r\n            <AddTask/> \r\n          \r\n        </section>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}